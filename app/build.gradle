plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.mikepenz.aboutlibraries.plugin'
    id 'com.google.devtools.ksp'
    id 'io.gitlab.arturbosch.detekt'
}

android {
    namespace 'com.arnyminerz.filamagenta'
    compileSdk 33

    defaultConfig {
        applicationId "com.arnyminerz.filamagenta"
        minSdk 21
        targetSdk 33
        versionCode findProperty("android.versionCode") as Integer
        versionName "1.0.0-alpha01"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true

        buildConfigField "String", "ACCOUNT_TYPE", '"fila_magenta"'
        buildConfigField "String", "AUTH_TOKEN_TYPE", '"fila_magenta"'
        resValue "string", "ACCOUNT_TYPE", "fila_magenta"

        def locales = getLocales()
        buildConfigField "String[]", "TRANSLATION_ARRAY", "new String[]{\"" + locales.join("\",\"") + "\"}"
        resConfigs locales

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        buildConfigField "String", "REST_BASE", '"' + properties.getProperty("REST_BASE") + '"'
        buildConfigField "String", "REST_PROTO", '"' + properties.getProperty("REST_PROTO") + '"'
        buildConfigField "String", "REST_PORT", '"' + properties.getProperty("REST_PORT") + '"'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())

            storeFile file("$rootDir/keystore.jks")
            storePassword properties.get('KEYSTORE_PASSWORD')
            keyAlias properties.get('KEYSTORE_USERNAME')
            keyPassword properties.get('KEYSTORE_PASSWORD')

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    sourceSets {
        main {
            res.srcDirs += ['build/generated/res/locale']
        }
    }
}


import groovy.xml.MarkupBuilder

import static groovy.io.FileType.DIRECTORIES

/**
 * Obtains a list of all the available locales
 * @since 20220928
 * @return A list with the language codes of the locales available.
 */
def getLocales() {
    // Initialize the list English, since it's available by default
    def list = ["en"]
    // Get all directories inside resources
    def dir = new File(projectDir, "src/main/res")
    dir.traverse(type: DIRECTORIES, maxDepth: 0) { file ->
        // Get only values directories
        def fileName = file.name
        if (!fileName.startsWith("values-")) return

        // Take only the values directories that contain strings
        def stringsFile = new File(file, "strings.xml")
        if (!stringsFile.exists()) return

        // Add to the list the locale of the strings file
        list.add(fileName.substring(fileName.indexOf('-') + 1))
    }
    // Log the available locales
    println "Supported locales: " + list.join(", ")
    // Return the built list
    return list
}

task updateLocalesConfig() {
    println 'Building locale config...'
    ext.outputDir = new File(projectDir, 'build/generated/res/locale/xml')

    doFirst {
        mkdir outputDir

        new File(outputDir, "locales_config.xml").withWriter { writer ->
            def destXml = new MarkupBuilder(new IndentPrinter(writer, "    ", true, true))
            destXml.setDoubleQuotes(true)
            def destXmlMkp = destXml.getMkp()
            destXmlMkp.xmlDeclaration(version: "1.0", encoding: "utf-8")
            destXmlMkp.comment("Generated at ${new Date()}")
            destXmlMkp.yield "\r\n"

            def locales = getLocales()
            destXml."locale-config"(['xmlns:android': "http://schemas.android.com/apk/res/android"]) {
                locales.forEach { locale ->
                    destXml."locale"("android:name": locale)
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        variant.assemble.doLast {
            // This increases version code on release
            def versionPropsFile = file("../gradle.properties")
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            def code = versionProps['android.versionCode'].toInteger() + 1
            versionProps['android.versionCode'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
            logger.lifecycle("Increased version code to $code")
        }
    }
}

gradle.projectsEvaluated {
    preBuild.dependsOn('updateLocalesConfig')
}

detekt {
    config = files("$rootDir/detekt.yml")
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'

    // AppCompat
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Jetpack Compose BoM
    def composeBom = platform('androidx.compose:compose-bom:2023.01.00')
    implementation composeBom
    androidTestImplementation composeBom

    // Jetpack Compose core
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation 'androidx.activity:activity-compose:1.6.1'

    // Jetpack Compose - Extended Icons
    implementation "androidx.compose.material:material-icons-extended"

    // Jetpack Compose - Material 3
    implementation 'androidx.compose.material3:material3'

    // Jetpack Compose - Navigation
    // def nav_version = "2.5.3"
    // implementation "androidx.navigation:navigation-compose:$nav_version"

    // Jetpack Compose - Windows
    implementation 'androidx.window:window:1.0.0'

    // Jetpack Compose - Accompanist
    def accompanist_version = "0.28.0"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    implementation "com.google.accompanist:accompanist-placeholder-material:$accompanist_version"

    // Jetpack Compose - Dialogs
    implementation 'io.github.vanpra.compose-material-dialogs:datetime:0.9.0'

    // Jetpack Compose - Markdown
    implementation 'com.arnyminerz.markdowntext:markdowntext:1.3.2'

    // KotlinX - Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'

    def lifecycle_version = "2.5.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // LiveData
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    // Timber Logger
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // About Libraries
    implementation "com.mikepenz:aboutlibraries-core:$about_libraries_version"
    implementation "com.mikepenz:aboutlibraries-compose:$about_libraries_version"

    // Room Database
    def room_version = "2.5.0"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    // Datastore preferences storage
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Volley for http requests
    implementation 'com.android.volley:volley:1.2.1'

    // Core desugaring. Note: 2.0.0 requires AGP >=7.4.0-alpha10
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}
